{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthorService = /*#__PURE__*/(() => {\n  class AuthorService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n    }\n\n    getAuthors(authorParams) {\n      let params = new HttpParams();\n      params = params.append('sort', authorParams.sort);\n      params = params.append('pageIndex', authorParams.pageNumber);\n      params = params.append('pageSize', authorParams.pageSize);\n      if (authorParams.search) params = params.append('search', authorParams.search);\n      return this.http.get(`${this.baseUrl}author`, {\n        observe: 'response',\n        params: params\n      }).pipe(map(source => {\n        return source.body;\n      }));\n    }\n\n    getAuthorsWithStories(authorParams) {\n      let params = new HttpParams();\n      params = params.append('sort', authorParams.sort);\n      params = params.append('pageIndex', authorParams.pageNumber);\n      params = params.append('pageSize', authorParams.pageSize);\n      if (authorParams.search) params = params.append('search', authorParams.search);\n      return this.http.get(`${this.baseUrl}author/included`, {\n        observe: 'response',\n        params: params\n      }).pipe(map(source => {\n        return source.body;\n      }));\n    }\n\n    getAuthor(id) {\n      return this.http.get(`${this.baseUrl}author/${id}`);\n    }\n\n    getAuthorWithStories(id) {\n      return this.http.get(`${this.baseUrl}author/included/${id}`);\n    }\n\n    getAuthorWithName(name) {\n      return this.http.get(`${this.baseUrl}author/get-by-name/${name}`);\n    }\n\n    addAuthor(authorDto) {\n      return this.http.post(`${this.baseUrl}author`, authorDto);\n    }\n\n    updateAuthor(authorDto, name) {\n      let params = new HttpParams();\n      if (name) params = params.append('name', name);\n      return this.http.put(`${this.baseUrl}author`, authorDto, {\n        observe: 'response',\n        params: params\n      });\n    }\n\n    deleteAuthor(name) {\n      return this.http.delete(`${this.baseUrl}author/${name}`);\n    }\n\n  }\n\n  AuthorService.ɵfac = function AuthorService_Factory(t) {\n    return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorService,\n    factory: AuthorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorService;\n})();","map":null,"metadata":{},"sourceType":"module"}